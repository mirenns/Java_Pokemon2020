
package codigo;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author xp
 */
public class VentanaPokedex extends javax.swing.JFrame {

    BufferedImage buffer1 = null;
    Image imagen1 = null;
    int contador = 1;
    
    Statement estado;
    ResultSet resultadoConsulta;
    Connection conexion;
    
    //Estructura para guardar todo el contenido de la base de datos de golpe
    HashMap<String, Pokemon> listaPokemons = new HashMap();
            
    
    @Override
    public void paint(Graphics g){
        super.paintComponents(g);
        Graphics2D g2 = (Graphics2D) imagenPokemon.getGraphics();
        g2.drawImage(buffer1, 0, 0,
                imagenPokemon.getWidth(),
                imagenPokemon.getHeight(), null);
    }
    
    /**
     * Creates new form VentanaPokedex
     */
    public VentanaPokedex() {
        initComponents();
        try {
            imagen1 = ImageIO.read(getClass()
                    .getResource("/imagenes/black-white.png"));
        } catch (IOException ex) {
        }
        
        buffer1 = (BufferedImage) imagenPokemon.createImage(
                imagenPokemon.getWidth(),
                imagenPokemon.getHeight());
        Graphics2D g2 = buffer1.createGraphics();
        
        dibujaElPokemonQueEstaEnLaPosicion(1);
        
        try{
            Class.forName("com.mysql.jdbc.Driver");
            conexion = DriverManager
                    .getConnection("jdbc:mysql://127.0.0.1/pokedex",
                            "root",
                            "");
            estado = conexion.createStatement();
            resultadoConsulta = estado.executeQuery("Select * from pokemon");
            //recorremos el array del resultado uno a uno para ir carg√°ndolo en el Hashmap
            
            while (resultadoConsulta.next()) {
                Pokemon p = new Pokemon();
                p.nombre = resultadoConsulta.getString("nombre"); 
                p.especie = resultadoConsulta.getString("especie"); 
                p.movimiento1 = resultadoConsulta.getString("movimiento1"); 
                p.movimiento2 = resultadoConsulta.getString("movimiento2"); 
                p.movimiento3 = resultadoConsulta.getString("movimiento3"); 
                p.movimiento4 = resultadoConsulta.getString("movimiento4"); 
                p.peso = resultadoConsulta.getString("peso"); 
                p.altura = resultadoConsulta.getString("altura"); 
                p.descripcion = resultadoConsulta.getString("descripcion");
                p.tipo1 = resultadoConsulta.getString("tipo1");
                p.tipo2 = resultadoConsulta.getString("tipo2");
                
                
                
                listaPokemons.put(resultadoConsulta.getString("id"), p);
            }
        }
        catch (Exception e){
            System.out.println(e.getMessage());
            System.out.println("hay un error");
        }
    }

    private void dibujaElPokemonQueEstaEnLaPosicion(int posicion){
        int fila = posicion / 31;
        int columna = posicion % 31;
        Graphics2D g2 = (Graphics2D) buffer1.getGraphics();
        g2.setColor(Color.black);
        g2.fillRect(0, 0, //pinta el fondo del jpanel negro
                imagenPokemon.getWidth(),
                imagenPokemon.getHeight()); 
        g2.drawImage(imagen1,
                0,  //posicion X inicial dentro del jpanel 
                0,  // posicion Y inicial dentro del jpanel
                imagenPokemon.getWidth(), //ancho del jpanel
                imagenPokemon.getHeight(), //alto del jpanel
                columna*96, //posicion inicial X dentro de la imagen de todos los pokemon
                fila*96, //posicion inicial Y dentro de la imagen de todos los pokemon
                columna*96 + 96, //posicion final X
                fila*96 + 96, //posicion final Y
                null  //si no lo pones no va
                );
        repaint();
        
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagenPokemon = new javax.swing.JPanel();
        der = new javax.swing.JButton();
        nombrePokemon = new javax.swing.JLabel();
        descripcion = new javax.swing.JLabel();
        altura = new javax.swing.JLabel();
        peso = new javax.swing.JLabel();
        especie = new javax.swing.JLabel();
        izq = new javax.swing.JButton();
        tipo1 = new javax.swing.JLabel();
        tipo2 = new javax.swing.JLabel();
        movimiento1 = new javax.swing.JLabel();
        movimiento2 = new javax.swing.JLabel();
        movimiento3 = new javax.swing.JLabel();
        movimiento4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        javax.swing.GroupLayout imagenPokemonLayout = new javax.swing.GroupLayout(imagenPokemon);
        imagenPokemon.setLayout(imagenPokemonLayout);
        imagenPokemonLayout.setHorizontalGroup(
            imagenPokemonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );
        imagenPokemonLayout.setVerticalGroup(
            imagenPokemonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        getContentPane().add(imagenPokemon);
        imagenPokemon.setBounds(60, 160, 250, 170);

        der.setFont(new java.awt.Font("Lucida Grande", 1, 48)); // NOI18N
        der.setBorder(null);
        der.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                derActionPerformed(evt);
            }
        });
        getContentPane().add(der);
        der.setBounds(290, 420, 50, 40);

        nombrePokemon.setBackground(new java.awt.Color(0, 0, 0));
        nombrePokemon.setFont(new java.awt.Font("Malayalam MN", 0, 18)); // NOI18N
        nombrePokemon.setForeground(new java.awt.Color(255, 255, 255));
        nombrePokemon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nombrePokemon.setOpaque(true);
        getContentPane().add(nombrePokemon);
        nombrePokemon.setBounds(430, 150, 140, 40);

        descripcion.setFont(new java.awt.Font("Malayalam MN", 0, 10)); // NOI18N
        descripcion.setForeground(new java.awt.Color(255, 255, 255));
        descripcion.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getContentPane().add(descripcion);
        descripcion.setBounds(450, 190, 240, 70);

        altura.setFont(new java.awt.Font("Malayalam MN", 1, 14)); // NOI18N
        altura.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(altura);
        altura.setBounds(452, 380, 50, 49);

        peso.setFont(new java.awt.Font("Malayalam MN", 1, 14)); // NOI18N
        peso.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(peso);
        peso.setBounds(500, 380, 50, 49);

        especie.setForeground(new java.awt.Color(255, 255, 255));
        especie.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(especie);
        especie.setBounds(90, 450, 118, 50);

        izq.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        izq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        izq.setBorderPainted(false);
        izq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izqActionPerformed(evt);
            }
        });
        getContentPane().add(izq);
        izq.setBounds(240, 420, 50, 40);

        tipo1.setForeground(new java.awt.Color(153, 255, 204));
        tipo1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(tipo1);
        tipo1.setBounds(450, 460, 110, 40);

        tipo2.setForeground(new java.awt.Color(153, 255, 204));
        tipo2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(tipo2);
        tipo2.setBounds(580, 460, 110, 40);

        movimiento1.setBackground(new java.awt.Color(0, 0, 0));
        movimiento1.setForeground(new java.awt.Color(255, 255, 255));
        movimiento1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        movimiento1.setOpaque(true);
        getContentPane().add(movimiento1);
        movimiento1.setBounds(440, 280, 130, 40);

        movimiento2.setBackground(new java.awt.Color(0, 0, 0));
        movimiento2.setForeground(new java.awt.Color(255, 255, 255));
        movimiento2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        movimiento2.setOpaque(true);
        getContentPane().add(movimiento2);
        movimiento2.setBounds(440, 320, 130, 40);

        movimiento3.setBackground(new java.awt.Color(0, 0, 0));
        movimiento3.setForeground(new java.awt.Color(255, 255, 255));
        movimiento3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        movimiento3.setOpaque(true);
        getContentPane().add(movimiento3);
        movimiento3.setBounds(570, 280, 120, 40);

        movimiento4.setBackground(new java.awt.Color(0, 0, 0));
        movimiento4.setForeground(new java.awt.Color(255, 255, 255));
        movimiento4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        movimiento4.setOpaque(true);
        getContentPane().add(movimiento4);
        movimiento4.setBounds(570, 320, 120, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pokedex.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 750, 550);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void izqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izqActionPerformed
        dibujaElPokemonQueEstaEnLaPosicion(contador);
        Pokemon p = listaPokemons.get(String.valueOf(contador+1));
        if (p != null) {
            nombrePokemon.setText(p.nombre);
            descripcion.setText(p.descripcion);
            altura.setText(p.altura);
            peso.setText(p.peso);
            especie.setText(p.especie);
            movimiento1.setText(p.movimiento1);
            movimiento2.setText(p.movimiento2);
            movimiento3.setText(p.movimiento3);
            movimiento4.setText(p.movimiento4);
            tipo1.setText(p.tipo1);
            tipo2.setText(p.tipo2);
            
        }
        else {
            nombrePokemon.setText("NO HAY DATOS");
            descripcion.setText("NO HAY DATOS");
            altura.setText("NO HAY DATOS");
            peso.setText("NO HAY DATOS");
            especie.setText("NO HAY DATOS");
            movimiento1.setText("NO HAY DATOS");
            movimiento2.setText("NO HAY DATOS");
            movimiento3.setText("NO HAY DATOS");
            movimiento4.setText("NO HAY DATOS");
            tipo1.setText("NO HAY DATOS");
            tipo2.setText("NO HAY DATOS");
        }
        contador --;
        if (contador <=0){
            contador = 1;
        }
    }//GEN-LAST:event_izqActionPerformed

    private void derActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_derActionPerformed
        
        dibujaElPokemonQueEstaEnLaPosicion(contador);
        contador ++;
        if (contador >=649){
            contador = 649;
        }
        Pokemon p = listaPokemons.get(String.valueOf(contador));
        if (p != null) {
            nombrePokemon.setText(p.nombre);
            descripcion.setText(p.descripcion);
            altura.setText(p.altura);
            peso.setText(p.peso);
            especie.setText(p.especie);
            movimiento1.setText(p.movimiento1);
            movimiento2.setText(p.movimiento2);
            movimiento3.setText(p.movimiento3);
            movimiento4.setText(p.movimiento4);
            tipo1.setText(p.tipo1);
            tipo2.setText(p.tipo2);
            
        }
        else {
            nombrePokemon.setText("NO HAY DATOS");
            descripcion.setText("NO HAY DATOS");
            altura.setText("NO HAY DATOS");
            peso.setText("NO HAY DATOS");
            especie.setText("NO HAY DATOS");
            movimiento1.setText("NO HAY DATOS");
            movimiento2.setText("NO HAY DATOS");
            movimiento3.setText("NO HAY DATOS");
            movimiento4.setText("NO HAY DATOS");
            tipo1.setText("NO HAY DATOS");
            tipo2.setText("NO HAY DATOS");
        }
        
    }//GEN-LAST:event_derActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPokedex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPokedex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPokedex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPokedex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPokedex().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel altura;
    private javax.swing.JButton der;
    private javax.swing.JLabel descripcion;
    private javax.swing.JLabel especie;
    private javax.swing.JPanel imagenPokemon;
    private javax.swing.JButton izq;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel movimiento1;
    private javax.swing.JLabel movimiento2;
    private javax.swing.JLabel movimiento3;
    private javax.swing.JLabel movimiento4;
    private javax.swing.JLabel nombrePokemon;
    private javax.swing.JLabel peso;
    private javax.swing.JLabel tipo1;
    private javax.swing.JLabel tipo2;
    // End of variables declaration//GEN-END:variables
}
